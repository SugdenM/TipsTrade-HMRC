using Newtonsoft.Json;
using System;

namespace TipsTrade.HMRC.Api.Model {
  /// <summary>Represents a response containing security tokens.</summary>
  public class TokenResponse {
    /// <summary>Gets the default number of minutes leeway that is used for determining if the <see cref="AccessToken"/> has expired.</summary>
    public const int DefaultSlewMinutes = 10;

    private double expiresIn;

    /// <summary>The access token.</summary>
    [JsonProperty("access_token")]
    public string AccessToken { get; set; }

    /// <summary>
    /// The UTC date at which the access token expires.
    /// This is generated by the client, so it is not guaranteed to be accurate.
    /// </summary>
    [JsonProperty("x_expires_timestamp")]
    public DateTime ExpiresTimestamp { get; set; }

    /// <summary>The number of seconds after which the </summary>
    [JsonProperty("expires_in")]
    public double ExpiresIn {
      get {
        return expiresIn;
      }
      set {
        expiresIn = value;
        ExpiresTimestamp = DateTime.UtcNow.AddSeconds(value);
      }
    }

    /// <summary>The refresh token.</summary>
    [JsonProperty("refresh_token")]
    public string RefreshToken { get; set; }

    /// <summary>The scope that the tokens apply to.</summary>
    [JsonProperty("scope")]
    public string Scope { get; set; }

    /// <summary>The type of token returned.</summary>
    [JsonProperty("token_type")]
    public string TokenType { get; set; }

    /// <summary>Returns a flag indicating whether the <see cref="AccessToken"/> has expired.</summary>
    /// <param name="slewMinutes">
    /// The number of minutes leeway to use when comparing the <see cref="ExpiresTimestamp"/>.
    /// A higher positive number will be more conservative.
    /// </param>
    public bool HasAccessTokenExpired(int slewMinutes = DefaultSlewMinutes) {
      return ExpiresTimestamp <= DateTime.UtcNow.AddMinutes(slewMinutes);
    }
  }
}
